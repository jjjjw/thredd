var articleBodyEl = document.getElementById('article-body')
  , Comments = require('ui/comments')
  , commentsEl = document.getElementById('js-comments-container')
  , Editor = require('ui/editor')
  , editorEl = document.getElementById('js-editor-container')
  , keyById = require('transforms').keyById
  , React = require('react')
  , Showdown = require('showdown')
  ;

var converter = new Showdown.converter()
  , quoteRe = /@"(.+)"/
  , quoteIdRe = /#(quote-\d+)/
  , quoteId = 0
  ;

function applyHighlights () {
  var id;
  var el;
  Array.prototype.forEach.call(document.getElementsByClassName('highlight'), function (node) {
    node.classList.remove('highlight');
  });
  var match = quoteIdRe.exec(window.document.location.hash);
    if (match && match.length > 1) {
      id = match[1];
      el = document.getElementById(id);
      el.classList.add('highlight');
    }
}

function createLink (quote, body) {
  return body.replace(quote, '<span id="quote-' + quoteId +'">' + quote + '</span>');;
}

// fucking hack
function processQuotes (comments) {
  var body = articleBodyEl.innerHTML;
  comments.forEach(function (comment) {
    var quote;
    var match = quoteRe.exec(comment.body);
    if (match && match.length > 1) {
      quote = match[1];
      body = createLink(quote, body)
      comment.body = comment.body.replace(match[0], '<a class="quote-link" href="#quote-' + quoteId +'">"' + quote + '"</span>');
      quoteId++;
    }
  });

  articleBodyEl.innerHTML = body;
}

exports.render = function (article, comments, users) {
  comments.forEach(function (comment) {
    comment.body = converter.makeHtml(comment.body);
  });

  comments.sort(function (a, b) {
    return b.createdAt - a.createdAt;
  });

  var editorComponent = Editor()
    , commentsComponent = Comments({
      comments: comments
      , users: keyById(users)
    })
    ;

  commentsEl.addEventListener('mouseup', function (ev) {
    setTimeout(function () {
      if (ev.target.className !== 'quote-link') return;
      applyHighlights();
    }, 4);
  });


  processQuotes(comments);
  applyHighlights();

  React.renderComponent(editorComponent, editorEl);
  React.renderComponent(commentsComponent, commentsEl);
};
