function cloneShallow (obj, opt_clone) {
  var clone = opt_clone || {};
  Object.keys(obj).forEach(function (k) {
    clone[k] = obj[k];
  });
  return clone;
};

 function copyShallow (from, to) {
  return cloneShallow(from, to);
};

 function listify (thing) {
  if (!Array.isArray(thing)) {
    return [thing];
  }
  return thing;
};

 function keyById (list) {
  var dict = {};
  list.forEach(function (model) {
    dict[model.id] = model;
  });
  return dict;
};

function threadify (commentList) {
  var topLevel = []
    , parentMap = {}
    ;

  if (!commentList || !commentList.length) return topLevel;

  commentList = commentList.map(function (comment) {
    comment = cloneShallow(comment);
    comment.replies = [];
    return comment;
  });

  commentList.sort(function (a, b) {
    return a.createdAt - b.createdAt;
  });

  commentList.forEach(function (comment) {
    var parent = parentMap[comment.parent];
    parentMap[comment.id] = comment;
    if (!parent) {
      topLevel.unshift(comment);
      return;
    }
    parent.replies.unshift(comment);
  });

  return topLevel;
};

module.exports = {
  cloneShallow: cloneShallow
  , copyShallow: copyShallow
  , listify: listify
  , keyById: keyById
  , threadify: threadify
};
